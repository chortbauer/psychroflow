import marimo

__generated_with = "0.7.5"
app = marimo.App()


@app.cell
def __():
    import marimo as mo
    import numpy as np
    from scipy.optimize import curve_fit

    import matplotlib.pyplot as plt
    from matplotlib import cm

    return cm, curve_fit, mo, np, plt


@app.cell
def __(np):
    side_t = (
        np.array(
            [
                0,
                10,
                20,
                30,
                40,
                50,
                60,
                70,
                80,
                90,
                100,
                110,
                120,
                130,
                140,
                150,
                160,
                170,
                180,
                190,
                200,
                210,
                220,
                230,
                240,
                250,
            ]
        )
        - 273.15
    )
    side_p = np.array(
        [0, 101_325, 101_325, 101_325, 101_325, 50e6, 100e6, 150e6, 200e6]
    )

    T, P = np.meshgrid(side_t, side_p)

    H = np.array(
        [
            [
                -632.129,
                -632.095,
                -631.526,
                -629.806,
                -626.955,
                -623.073,
                -618.220,
                -612.434,
                -605.754,
                -598.219,
                -589.870,
                -580.749,
                -570.893,
                -560.331,
                -549.082,
                -537.156,
                -524.558,
                -511.284,
                -497.331,
                -482.691,
                -467.357,
                -451.321,
                -434.577,
                -417.118,
                -398.939,
                -380.035,
            ],
            [
                -632.020,
                -631.987,
                -631.417,
                -629.698,
                -626.846,
                -622.965,
                -618.111,
                -612.326,
                -605.646,
                -598.110,
                -589.761,
                -580.641,
                -570.785,
                -560.223,
                -548.974,
                -537.048,
                -524.450,
                -511.177,
                -497.224,
                -482.584,
                -467.250,
                -451.215,
                -434.471,
                -417.012,
                -398.833,
                -379.929,
            ],
            [
                -632.020,
                -631.987,
                -631.417,
                -629.698,
                -626.846,
                -622.965,
                -618.111,
                -612.326,
                -605.646,
                -598.110,
                -589.761,
                -580.641,
                -570.785,
                -560.223,
                -548.974,
                -537.048,
                -524.450,
                -511.177,
                -497.224,
                -482.584,
                -467.250,
                -451.215,
                -434.471,
                -417.012,
                -398.833,
                -379.929,
            ],
            [
                -632.020,
                -631.987,
                -631.417,
                -629.698,
                -626.846,
                -622.965,
                -618.111,
                -612.326,
                -605.646,
                -598.110,
                -589.761,
                -580.641,
                -570.785,
                -560.223,
                -548.974,
                -537.048,
                -524.450,
                -511.177,
                -497.224,
                -482.584,
                -467.250,
                -451.215,
                -434.471,
                -417.012,
                -398.833,
                -379.929,
            ],
            [
                -632.020,
                -631.987,
                -631.417,
                -629.698,
                -626.846,
                -622.965,
                -618.111,
                -612.326,
                -605.646,
                -598.110,
                -589.761,
                -580.641,
                -570.785,
                -560.223,
                -548.974,
                -537.048,
                -524.450,
                -511.177,
                -497.224,
                -482.584,
                -467.250,
                -451.215,
                -434.471,
                -417.012,
                -398.833,
                -379.929,
            ],
            [
                -578.708,
                -578.675,
                -578.105,
                -576.387,
                -573.538,
                -569.661,
                -564.816,
                -559.044,
                -552.384,
                -544.877,
                -536.564,
                -527.488,
                -517.685,
                -507.182,
                -495.998,
                -484.143,
                -471.617,
                -458.419,
                -444.543,
                -429.980,
                -414.723,
                -398.765,
                -382.099,
                -364.717,
                -346.614,
                -327.786,
            ],
            [
                -525.530,
                -525.496,
                -524.927,
                -523.209,
                -520.362,
                -516.490,
                -511.653,
                -505.894,
                -499.252,
                -491.771,
                -483.492,
                -474.457,
                -464.703,
                -454.255,
                -443.132,
                -431.341,
                -418.884,
                -405.757,
                -391.952,
                -377.462,
                -362.279,
                -346.394,
                -329.801,
                -312.493,
                -294.463,
                -275.707,
            ],
            [
                -472.583,
                -472.550,
                -471.981,
                -470.264,
                -467.419,
                -463.550,
                -458.720,
                -452.973,
                -446.348,
                -438.890,
                -430.642,
                -421.645,
                -411.936,
                -401.539,
                -390.472,
                -378.742,
                -366.348,
                -353.286,
                -339.549,
                -325.127,
                -310.013,
                -294.198,
                -277.674,
                -260.435,
                -242.475,
                -223.789,
            ],
            [
                -419.860,
                -419.826,
                -419.257,
                -417.541,
                -414.697,
                -410.832,
                -406.009,
                -400.271,
                -393.663,
                -386.226,
                -378.005,
                -369.043,
                -359.375,
                -349.025,
                -338.009,
                -326.334,
                -313.999,
                -300.998,
                -287.323,
                -272.966,
                -257.916,
                -242.166,
                -225.708,
                -208.535,
                -190.641,
                -172.021,
            ],
        ]
    )

    shape = T.shape
    T_1d = T.reshape((1, np.prod(shape)))
    P_1d = P.reshape((1, np.prod(shape)))
    H_1d = H.reshape(np.prod(shape))

    tpdata = np.vstack((T_1d, P_1d))
    return H, H_1d, P, P_1d, T, T_1d, shape, side_p, side_t, tpdata


@app.cell
def __():
    def fun(x, a, b, c, d, e, f, g, h, i):
        return (
            a * 10**popt_exp[0]
            + b * 10**popt_exp[1] * x[0]
            + c * 10**popt_exp[2] * (x[0] + d * 10**popt_exp[3]) ** 2
            + e * 10**popt_exp[4] * (x[0] + f * 10**popt_exp[5]) ** 3
            + g * 10**popt_exp[6] * x[1]
            + h * 10**popt_exp[7] * x[0] * x[1]
            + i * 10**popt_exp[8] * x[0] ** 4
        )

    popt_exp = [2, 0, -2, 1, -6, 2, -6, -11, -8]
    return fun, popt_exp


@app.cell
def __(H_1d, curve_fit, fun, tpdata):
    popt, pcov = curve_fit(fun, tpdata, H_1d)
    popt
    return pcov, popt


@app.cell
def __():
    # par = np.array([10**i for i in popt_exp]) * popt

    def func(t, p):
        par = [
            -2.70294220e02,
            1.24402713e00,
            8.93801998e-03,
            -1.83220177e00,
            7.23417939e-06,
            -2.05636891e02,
            1.04193446e-06,
            -9.10809818e-11,
            1.72793363e-08,
        ]
        return (
            par[0]
            + par[1] * t
            + par[2] * (t + par[3]) ** 2
            + par[4] * (t + par[5]) ** 3
            + par[6] * p
            + par[7] * t * p
            + par[8] * t**4
        )


    func(0, 100_000)
    return func,


@app.cell
def __(fun, popt, shape, tpdata):
    H_fit_1d = fun(tpdata, *popt)
    # H_fit_1d = func(T,P)
    H_fit = H_fit_1d.reshape(shape)
    return H_fit, H_fit_1d


@app.cell
def __(H, H_fit, P, T, cm, plt):
    fig = plt.figure(figsize=(7,7))
    ax = fig.add_subplot(111, projection='3d')

    ax.plot_surface(T, P, H-H_fit, alpha=0.7,cmap=cm.Blues)
    # ax.plot_surface(T, P, np.zeros_like(H), alpha=0.7)

    ax.set_xlabel('Temperatur [Â°C]')
    ax.set_ylabel('Druck [Pa]')
    ax.set_zlabel('Enthalpie [kJ/kg]')

    fig
    return ax, fig


@app.cell
def __():
    return


@app.cell
def __(np):
    h_ = np.array(
        [
            -632.020,
            -631.987,
            -631.417,
            -629.698,
            -626.846,
            -622.965,
            -618.111,
            -612.326,
            -605.646,
            -598.110,
            -589.761,
            -580.641,
            -570.785,
            -560.223,
            -548.974,
            -537.048,
            -524.450,
            -511.177,
            -497.224,
            -482.584,
            -467.250,
            -451.215,
            -434.471,
            -417.012,
            -398.833,
            -379.929,
            -360.295,
            -339.928,
            -333.675,
        ]
    )

    t_ = np.array(
        [
            0,
            10,
            20,
            30,
            40,
            50,
            60,
            70,
            80,
            90,
            100,
            110,
            120,
            130,
            140,
            150,
            160,
            170,
            180,
            190,
            200,
            210,
            220,
            230,
            240,
            250,
            260,
            270,
            273,
        ]
    )-273.15

    return h_, t_


@app.cell
def __():
    def fun_(x, a, b, c, d, e):
        return (
            a * 10 ** popt_exp_[0]
            + b * 10 ** popt_exp_[1] * x
            + c * 10 ** popt_exp_[2] * x**2
            + d * 10 ** popt_exp_[3] * x**3
            + e * 10 ** popt_exp_[4] * x**4
        )


    popt_exp_ = [2, 0, -2, -6, -8]
    return fun_, popt_exp_


@app.cell
def __(curve_fit, fun_, h_, t_):
    popt_, pcov_ = curve_fit(fun_, t_, h_)
    popt_
    return pcov_, popt_


@app.cell
def __(np, popt_, popt_exp_):
    np.array([10**i for i in popt_exp_]) * popt_
    return


@app.cell
def __(fun_, h_, plt, popt_, t_):
    fig_ = plt.figure(figsize=(7,5))
    ax_ = fig_.add_subplot(111)

    ax_.plot(t_, h_-fun_(t_, *popt_))

    ax_.set_xlabel('Temperatur [Â°C]')
    ax_.set_ylabel('Enthalpie Error [kJ/kg]')

    fig_
    return ax_, fig_


@app.cell
def __():
    return


if __name__ == "__main__":
    app.run()
